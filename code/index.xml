<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
	<title>My personal website</title>
	<link>https://aleksandarvasilic.github.io/code/</link>
	<description>Recent content in Codes on My personal website</description>
	<generator>Hugo -- gohugo.io</generator>
	<language>en-us</language>
	<lastBuildDate>Thu, 21 Jul 2022 14:56:59 +0200</lastBuildDate>
    
        <atom:link href="https://aleksandarvasilic.github.io/code/index.xml" rel="self" type="application/rss+xml" />
	
	
	<item>
		<title>Multiple SSH connections</title>
		<link>https://aleksandarvasilic.github.io/code/multiple_ssh/</link>
		<pubDate>Thu, 21 Jul 2022 14:56:59 +0200</pubDate>
		
		<guid>https://aleksandarvasilic.github.io/code/multiple_ssh/</guid>
		<description>&lt;h1 id=&#34;every-time-you-change-ssh-you-must-go-and-do-the-following-command&#34;&gt;Every time you change SSH you must go and do the following command&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh-add ~/.ssh/wanted_key
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	<item>
		<title>Generating and adding SSH to GitHub</title>
		<link>https://aleksandarvasilic.github.io/code/ssh/</link>
		<pubDate>Thu, 21 Jul 2022 14:10:08 +0200</pubDate>
		
		<guid>https://aleksandarvasilic.github.io/code/ssh/</guid>
		<description>&lt;h2 id=&#34;creating-ssh-key&#34;&gt;Creating ssh key&lt;/h2&gt;
&lt;p&gt;The first order of business should be that we create SSH key, assuming that we have installed and configured SSH on our system.&lt;/p&gt;
&lt;p&gt;Running this command will create our desired key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh-keygen -t ed255519 -C example@githubemail.com

&lt;span style=&#34;color:#75715e&#34;&gt;#ssh-keygen &amp;lt;-- how we are going to generate a key&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#-t ed25519 &amp;lt;-- is type of encryption&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#-C &amp;lt;-- here is the email asociated with that key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once a command is called the following will be printed on our terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Generating public/private ed25519 key pair.

&lt;span style=&#34;color:#75715e&#34;&gt;# It will ask you where do you want to save the file&lt;/span&gt;
Enter file in which to save the key &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;/home/user/.ssh/id_ed25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: 


&lt;span style=&#34;color:#75715e&#34;&gt;# This is optional. If you want a more secure connection use a passphrase, otherwise leave it blank&lt;/span&gt;
Enter passphrase &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;empty &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; no passphrase&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
Enter same passphrase again: 

&lt;span style=&#34;color:#75715e&#34;&gt;# The rest will be printed automaticaly&lt;/span&gt; 
Your identification has been saved in /home/user/.ssh/id_ed25519
Your public key has been saved in /home/user/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:bGDfSMIq2TjS/C7b/ASdxd0JHfasdSxYfjKYJjfwWBdKT0Cs example@githubemail.com
The key&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s randomart image is:
&lt;span style=&#34;color:#75715e&#34;&gt;# image will be shown&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have a key generated, we need to make sure that our SSH agent knows about it.&lt;/p&gt;
&lt;h2 id=&#34;starting-our-ssh-agent&#34;&gt;Starting our ssh agent&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;editing-config-file-inside-of-shh&#34;&gt;Editing config file inside of .shh&lt;/h2&gt;
&lt;p&gt;Makeing sure that we don&amp;rsquo;t or do have &lt;strong&gt;config&lt;/strong&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ls ~/.ssh/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If there isn&amp;rsquo;t, we will crate the &lt;strong&gt;config&lt;/strong&gt; file inside of the &lt;strong&gt;.ssh&lt;/strong&gt; directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;touch ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to edit that file by entering &lt;strong&gt;this&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;We have everything created and configured, the only two things left to do is to run this command and add the key to GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh-add ~/.ssh/new_created_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-our-ssh-key-to-the-githubhttpsgithubcomsettingssshnew&#34;&gt;Adding our ssh key to the &lt;a href=&#34;https://github.com/settings/ssh/new&#34;&gt;GitHub&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What we do is put the content of the generated key into GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat ~/.ssh/nameOfKey.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;trying-to-access-gtihubcom-via-ssh&#34;&gt;Trying to access gtihub.com via ssh&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	<item>
		<title>Window focus follows the cursor</title>
		<link>https://aleksandarvasilic.github.io/code/mouse_focus/</link>
		<pubDate>Sat, 16 Jul 2022 19:15:01 +0200</pubDate>
		
		<guid>https://aleksandarvasilic.github.io/code/mouse_focus/</guid>
		<description>&lt;p&gt;If you are coming from GNU/Linux background, you might notice that Desktop Environment from Windows OS doesn&amp;rsquo;t have the ease of focus that comes from hovering over open programs window.&lt;/p&gt;
&lt;p&gt;Now, this little annoyance can be corrected by running a CMD script.&lt;/p&gt;
&lt;p&gt;The following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;$signature = &lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[DllImport(&amp;#34;user32.dll&amp;#34;)]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;public static extern bool SystemParametersInfo(int uAction, int uParam, ref 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;int lpvParam, int flags );
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@&lt;/span&gt;

$systemParamInfo = Add-Type -memberDefinition  $signature -Name SloppyFocusMouse -passThru

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Int32]&lt;/span&gt;$newVal = 1
$systemParamInfo::SystemParametersInfo(0x1001, 0, &lt;span style=&#34;color:#66d9ef&#34;&gt;[REF]&lt;/span&gt;$newVal, 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	<item>
		<title>Problems with terminal keystrokes while using SSH</title>
		<link>https://aleksandarvasilic.github.io/code/ssh_fix/</link>
		<pubDate>Sat, 16 Jul 2022 17:37:59 +0200</pubDate>
		
		<guid>https://aleksandarvasilic.github.io/code/ssh_fix/</guid>
		<description>&lt;p&gt;Sometimes some terminal emulators don&amp;rsquo;t respond well to the established ssh connection. Backspace and some other keystrokes simply do not work at all.&lt;/p&gt;
&lt;p&gt;This problem does not occur on all terminal emulators, but on some such as kitty or alacritty and maybe some other terminal emulators that I do not know of, this problem is occurs often. For the record, I think that gnome-terminal and xfce4-terminal don&amp;rsquo;t have this problem.&lt;/p&gt;
&lt;h2 id=&#34;a-command-that-fixes-this-issue-is&#34;&gt;A command that fixes this issue is:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;export TERM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;vt100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	<item>
		<title>Caps Lock as Esc and Mod key</title>
		<link>https://aleksandarvasilic.github.io/code/caps_lock/</link>
		<pubDate>Sat, 16 Jul 2022 15:43:48 +0200</pubDate>
		
		<guid>https://aleksandarvasilic.github.io/code/caps_lock/</guid>
		<description>&lt;h1 id=&#34;setting-up-caps-lock-as-an-esc-and-mod-key&#34;&gt;Setting up Caps Lock as an Esc and Mod key&lt;/h1&gt;
&lt;p&gt;This set of commands will change the default keyboard layout by swapping &lt;strong&gt;Caps Lock&lt;/strong&gt; key with the &lt;strong&gt;Esc&lt;/strong&gt; key.&lt;/p&gt;
&lt;p&gt;Now typically this can be done by adding one or two lines of code in your .bashrc file or the i3 config file, but what I encourage you to do is that you put this in the .profile in your &lt;em&gt;&lt;strong&gt;/home/#&lt;/strong&gt;&lt;/em&gt; folder.&lt;/p&gt;
&lt;p&gt;Not only do these commands swap the &lt;strong&gt;Esc&lt;/strong&gt; key and &lt;strong&gt;Caps Lock&lt;/strong&gt; key, but also if we hold the &lt;strong&gt;Caps Lock&lt;/strong&gt; key for long enough, the mentioned key starts behaving like a &lt;strong&gt;Mod&lt;/strong&gt; key.&lt;/p&gt;
&lt;p&gt;This comes extremely useful if you are using tiling window managers ( such as i3wm, dwm, xmonad, etc&amp;hellip; ) in combination with vi text editors ( vi, vim, neovim&amp;hellip; ).&lt;/p&gt;
&lt;p&gt;For example, if we type something in vim and we want to exit the &lt;strong&gt;INSERT&lt;/strong&gt; mode and go back to &lt;strong&gt;NORMAL&lt;/strong&gt; mode, what we need to do is just slide our pinky finger to the left of &amp;ldquo;A&amp;rdquo; key and get our job done.
The same goes for changing the current window in the TWM, we don&amp;rsquo;t have to awkwardly hold our &lt;strong&gt;Mod&lt;/strong&gt; key which is in most cases the &lt;strong&gt;Windows&lt;/strong&gt; key.&lt;/p&gt;
&lt;h2 id=&#34;set-of-commands-that-you-put-in-profile&#34;&gt;Set of commands that you put in .profile&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#increase key speed via a rate change&lt;/span&gt;
xset r rate &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Map the caps lock to super...&lt;/span&gt;
setxkbmap -option caps:super
&lt;span style=&#34;color:#75715e&#34;&gt;#When is pressed only once, treat it as escape&lt;/span&gt;
killall xcape 2&amp;gt;/dev/null ; xcape -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Super_L=Escape&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Map the neby button to right super as well.&lt;/span&gt;
xmodmap -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keycode 135 = Super_R&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Turn off the caps lock if on since there is no longer a key for it&lt;/span&gt;
xset -q | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caps Lock:\s*on&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; xdotool key Caps_Lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	<item>
		<title>Miscellaneous</title>
		<link>https://aleksandarvasilic.github.io/code/miscellaneous/</link>
		<pubDate>Sat, 16 Jul 2022 14:59:22 +0200</pubDate>
		
		<guid>https://aleksandarvasilic.github.io/code/miscellaneous/</guid>
		<description>&lt;h1 id=&#34;code&#34;&gt;CODE&lt;/h1&gt;
&lt;p&gt;This page is dedicated to a bunch of useful code/commands that I have found over time. Usually, these commands can be replicated in the future if needed.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-caps-lock-as-an-esc-and-mod-key&#34;&gt;Setting up Caps Lock as an Esc and Mod key&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#increase key speed via a rate change&lt;/span&gt;
xset r rate &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &amp;lt;br&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Map the caps lock to super...&lt;/span&gt;
setxkbmap -option caps:super
&lt;span style=&#34;color:#75715e&#34;&gt;#When is pressed only once, treat it as escape&lt;/span&gt;
killall xcape 2&amp;gt;/dev/null ; xcape -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Super_L=Escape&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Map the neby button to right super as well.&lt;/span&gt;
xmodmap -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;keycode 135 = Super_R&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Turn off the caps lock if on since there is no longer a key for it&lt;/span&gt;
xset -q | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Caps Lock:\s*on&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; xdotool key Caps_Lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	</channel>
</rss>
